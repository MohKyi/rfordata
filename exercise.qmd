---
title: "data_trans_Exercise"
author: "Moh Kyi"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

```{r}
library(dbplyr)
library("nycflights13")
```

Filter Exercise

1.  Find all flights that

    1.  Had an arrival delay of two or more hours

    2.  Flew to Houston (`IAH` or `HOU`)

    3.  Were operated by United, American, or Delta

    4.  Departed in summer (July, August, and September)

    5.  Arrived more than two hours late, but didn't leave late

    6.  Were delayed by at least an hour, but made up over 30 minutes in flight

    7.  Departed between midnight and 6am (inclusive)

2.  Another useful dplyr filtering helper is [`between()`](https://dplyr.tidyverse.org/reference/between.html). What does it do? Can you use it to simplify the code needed to answer the previous challenges?

3.  How many flights have a missing `dep_time`? What other variables are missing? What might these rows represent?

4.  Why is `NA ^ 0` not missing? Why is `NA | TRUE` not missing? Why is `FALSE & NA` not missing? Can you figure out the general rule? (`NA * 0` is a tricky counterexample!)

```{r}
#Had an arrival delay of two or more hours
flights
View (flights)
(more_two <- filter(flights, arr_delay >=120))
```

```{r}
#Flew to Houston (IAH or HOU)
filter(flights, dest %in% c("IAH", "HOU"))
filter(flights, dest == "IAH" | dest == "HOU")
```

```{r}
#Were operated by United, American, or Delta
airlines

filter(flights, carrier %in% c("AA", "DL", "UA"))
```

```{r}
#Departed in summer (July, August, and September)
filter(flights, month >= 7, month <= 9)
filter(flights, month %in% 7:9)
filter(flights, month == 7 | month == 8 | month == 9)
```

```{r}
#Arrived more than two hours late, but didn't leave late
filter(flights, arr_delay > 120, dep_delay <= 0)
```

```{r}
#Were delayed by at least an hour, but made up over 30 minutes in flight.
filter(flights, dep_delay >= 60, dep_delay - arr_delay > 30)
```

```{r}
#Finding flights that departed between midnight and 6 a.m. is complicated by the way in which times are represented in the data.
summary(flights$dep_time)
filter(flights, dep_time <= 600 | dep_time == 2400)
filter(flights, dep_time %% 2400 <= 600)
```

```{r}
#Another useful dplyr filtering helper is between(). What does it do? Can you use it to simplify the code needed to answer the previous challenges?
filter (flights, between(month, 7,9))
```

```{r}
#How many flights have a missing dep_time? What other variables are missing? What might these rows represent?
filter(flights, is.na(dep_time))
```

```{r}
#Why is NA ^ 0 not missing? Why is NA | TRUE not missing? Why is FALSE & NA not missing? Can you figure out the general rule? (NA * 0 is a tricky counterexample!)
```

Arrange Exercise

```{r}
#How could you use arrange() to sort all missing values to the start? (Hint: use is.na()).
arrange(flights, desc(is.na(dep_time)), dep_time)


arrange(flights, dep_time) %>%
  tail()

```

```{r}
#Find the most delayed flights by sorting the table by departure delay, dep_delay, in descending order.
arrange(flights, desc(dep_delay))
```

```{r}
#Sort flights to find the fastest flights.
arrange(flights, air_time)
```

```{r}
#Which flights traveled the longest? Which traveled the shortest?
arrange(flights, desc(distance))
arrange(flights, distance)
```

## Select

```{r}
#Brainstorm as many ways as possible to select dep_time, dep_delay, arr_time, and arr_delay from flights.
select(flights, dep_time, dep_delay, arr_time, arr_delay)
select(flights, 4, 6, 7, 9)
select(flights, starts_with("dep_"), starts_with("arr_"))
```

```{r}
#What happens if you include the name of a variable multiple times in a select() call?
select(flights, year, month, day, year, year)
```

```{r}
#What does the any_of() function do? Why might it be helpful in conjunction with this vector?
vars <- c("year", "month", "day", "dep_delay", "arr_delay")
select(flights, any_of(vars))
```

```{r}
#Does the result of running the following code surprise you? How do the select helpers deal with case by default? How can you change that default?
select(flights, contains("TIME"))
```

## `mutate`

```{r}
#Currently dep_time and sched_dep_time are convenient to look at, but hard to compute with because theyâ€™re not really continuous numbers. Convert them to a more convenient representation of number of minutes since midnight.


```

```{r}
#Compare air_time with arr_time - dep_time. What do you expect to see? What do you see? What do you need to do to fix it?
```

```{r}
#Compare dep_time, sched_dep_time, and dep_delay. How would you expect those three numbers to be related?

```

```{r}
#Find the 10 most delayed flights using a ranking function. How do you want to handle ties? Carefully read the documentation for min_rank().
```

```{r}
#What does 1:3 + 1:10 return? Why?
1:3+ 1:10
```

```{r}
#What trigonometric functions does R provide?

```
