---
title: "workflowbasic"
author: "Moh_Kyi"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

Coding Basic

```{r}
1 / 200 * 30

(59 + 73 + 2) / 3

sin(pi / 2)

```

You can create new objects with `<-`:

```{r}
x <- 3 * 4
```

```{r}
seq(1, 10)

```

```{r}
y <- seq(1, 10, length.out = 5)
y

```

```{r}
(y <- seq(1, 10, length.out = 5))

```

R user interface

```{r}
1 + 1
100:130 
2*3
4-1
6/(4-1)
```

Object

The `:` operator returns its results as a **vector**, a one-dimensional set of numbers:

```{r}
1:6
```

R lets you save data by storing it inside an R object.

```{r}
a <- 1
a
a+2
```

```{r}
die <- 1:6
die
```

R will overwrite any previous information stored in an object without asking you for permission

```{r}
my_number <- 1
my_number 

my_number <- 999
my_number
```

You can see which object names you have already used with the function `ls`

```{r}
ls()
```

```{r}
die - 1
die / 2
die * die

```

R does not always follow the rules of matrix multiplication. Instead, R uses *element-wise execution*.When you manipulate a set of numbers, R will apply the same operation to each element in the set. So for example, when you run *`die - 1`*, R subtracts one from each element of `die`. *`die * die`*, R lines up the two `die` vectors and then multiplies the first element of vector 1 by the first element of vector 2. R then multiplies the second element of vector 1 by the second element of vector 2,![Figure 1](images/Screenshot%202023-01-08%20at%2018.05.24.png)

don't think that R has given up on traditional matrix multiplication. You just have to ask for it when you want it. You can do inner multiplication with the `%*%` operator and outer multiplication with the `%o%` operator:

```{r}
die %*% die

die %o% die

```

Function

```{r}
round(3.1415)

factorial(3)

mean(1:6)

mean(die)

round(mean(die))

```

`sample` function. `sample` takes *two* arguments: a vector named `x` and a number named `size`. `sample` will return `size` elements from the vector:

```{r}
sample(x = 1:4, size = 2)

sample(x = die, size = 1)
```

To do this, place the name of the function in the parentheses behind `args`

```{r}
args(round)

round(3.1415, digits = 2)
```

The argument `replace = TRUE` causes `sample` to sample *with replacement*.

```{r}
sample(die, size = 2, replace = TRUE)

sample(die, size = 2, replace = TRUE)


```

Once you save a set of results to an R object, those results do not change.

```{r}
dice <- sample(die, size = 2, replace = TRUE)

dice

dice
```

Writing your own functions

```{r}
die <- 1:6

dice <- sample(die, size = 2, replace = TRUE)

sum(dice)
```

The function constructor

```{r}
my_function <- function() {}
```

```{r}
roll <- function() {
  die <- 1:6
  dice <- sample(die, size = 2, replace = TRUE)
  sum(dice)
}

roll()
```

Arguments

```{r}
roll2 <- function(bones) {
  dice <- sample(bones, size = 2, replace = TRUE)
  sum(dice)
}
```

```{r}
roll2(bones = 1:4)

roll2(bones = 1:6)

roll2(1:20)
```

```{r}
roll2 <- function(bones = 1:6) {
  dice <- sample(bones, size = 2, replace = TRUE)
  sum(dice)
}

roll2()
```

```{r}
dice <- sample(die, size = 2, replace = TRUE)
two <- 1 + 1
a <- sqrt(2)

```

![](images/Screenshot%202023-01-08%20at%2019.39.37.png)

```{r}

```
